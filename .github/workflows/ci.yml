name: "CI/CD Pipeline"

permissions:
  contents: read
  packages: write
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  IMAGE_LOCAL: "github-notion:ci"

jobs:
  code-quality:
    name: "Code Quality Checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff safety pip-audit bandit

      - name: "Code Formatting Check (Black)"
        run: |
          black --check --diff app/ tests/ scripts/

      - name: "Import Sorting Check (isort)"
        run: |
          isort --check-only --diff app/ tests/ scripts/

      - name: "Linting (Ruff)"
        run: |
          ruff check app/ tests/ scripts/ --output-format=github

      - name: "Traditional Linting (Flake8)"
        run: |
          flake8 app/ tests/ scripts/ --max-line-length=120 --ignore=E203,W503,E127,E128,C901 --exclude=__pycache__,*.pyc --format=github

  security-scan:
    name: "Security Scanning"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety pip-audit bandit

      - name: "Python Security Audit"
        run: |
          pip-audit --desc --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: "Python Security Check"
        run: |
          safety check --json --output=safety-report.json
        continue-on-error: true

      - name: "Source Code Security"
        run: |
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: "Secrets Scanning"
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  testing:
    name: "Testing Suite"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: "Create Test Database Directory"
        run: |
          mkdir -p data

      - name: "Run Unit Tests with Coverage"
        env:
          PYTHONPATH: ${{ github.workspace }}
          DISABLE_METRICS: "1"
          DISABLE_NOTION: "1"
          GITEE_WEBHOOK_SECRET: "ci-test-secret"
          GITHUB_WEBHOOK_SECRET: "ci-test-secret"
          DEADLETTER_REPLAY_TOKEN: "ci-test-deadletter-token"
          DB_URL: "sqlite:///data/test.db"
          LOG_LEVEL: "WARNING"
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70 -n auto

  docker-build:
    name: "Docker Build & Test"
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Build Docker Image"
        run: |
          docker build -f Dockerfile -t ${{ env.IMAGE_LOCAL }} .

      - name: "Test Docker Image Security"
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_LOCAL }}
          format: sarif
          output: trivy-results.sarif

      - name: "Container Smoke Test"
        run: |
          docker run -d --name ci-test-app -p 8000:8000 -e APP_PORT=8000 -e LOG_LEVEL=INFO -e GITEE_WEBHOOK_SECRET=ci-secret -e GITHUB_WEBHOOK_SECRET=ci-secret -e DEADLETTER_REPLAY_TOKEN=ci-deadletter-token -e DISABLE_NOTION=1 -e DISABLE_METRICS="" -e DB_URL=sqlite:///data/sync.db ${{ env.IMAGE_LOCAL }}
          echo "等待应用启动..."
          for i in {1..30}; do
            if curl -f http://127.0.0.1:8000/health >/dev/null 2>&1; then
              echo "应用启动成功"
              break
            fi
            echo "等待中... ($i/30)"
            sleep 2
          done
          curl -f http://127.0.0.1:8000/health || exit 1
          curl -f http://127.0.0.1:8000/metrics || exit 1
          docker logs --tail 20 ci-test-app
          docker rm -f ci-test-app

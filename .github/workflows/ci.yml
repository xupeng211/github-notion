name: "CI/CD Pipeline"

permissions:
  contents: read
  packages: write
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  IMAGE_LOCAL: "github-notion:ci"

jobs:
  code-quality:
    name: "Code Quality Checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            pip-${{ runner.os }}-
      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install safety pip-audit bandit

      - name: "Code Formatting Check (Black)"
        run: |
          black --check --diff app/ tests/ scripts/

      - name: "Import Sorting Check (isort)"
        run: |
          isort --check-only --diff app/ tests/ scripts/

      - name: "Linting (Ruff)"
        run: |
          ruff check app/ tests/ scripts/ --output-format=github

      - name: "Traditional Linting (Flake8)"
        run: |
          flake8 app/ tests/ scripts/ --max-line-length=120 --ignore=E203,W503,E127,E128,C901 --exclude=__pycache__,*.pyc --format=github

  security-scan:
    name: "Security Scanning"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety pip-audit bandit

      - name: "Python Security Audit"
        run: |
          pip-audit --desc --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: "Python Security Check"
        run: |
          safety check --json --output=safety-report.json
        continue-on-error: true

      - name: "Source Code Security"
        run: |
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: "Secrets Scanning"
        run: |
          echo "üîç Scanning for secrets..."
          # ‰ΩøÁî®ÁÆÄÂçïÁöÑ grep Ê®°ÂºèÊ£ÄÊü•Â∏∏ËßÅÁöÑÂØÜÈí•Ê®°Âºè
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{10,}['\"]" app/ --exclude-dir=__pycache__ || true; then
            echo "‚ö†Ô∏è  Found potential secrets in code"
          fi
          echo "‚úÖ Secrets scanning completed"
        continue-on-error: true

  testing:
    name: "Testing Suite"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
        split: [0, 1]
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
        env:
          MATRIX_SPLIT: ${{ matrix.split }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
            pip-${{ runner.os }}-
      - name: "Install Dependencies"
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist pytest-split
          # È™åËØÅÂÖ≥ÈîÆ‰æùËµñ
          python -c "import sqlalchemy; print('SQLAlchemy version:', sqlalchemy.__version__)"
          python -c "import pytest; print('Pytest version:', pytest.__version__)"

      - name: "Create Test Database Directory"
        run: |
          mkdir -p data

      - name: "Split Index"
        id: split
        run: |
          python - <<'PY'
          import glob, json, os
          tests = sorted(glob.glob('tests/**/*_test.py', recursive=True) + glob.glob('tests/test_*.py'))
          if not tests:
            tests = sorted(glob.glob('tests/**/*.py', recursive=True))
          chunk = 2
          idx = int(os.environ.get('MATRIX_SPLIT','0'))
          selected = tests[idx::chunk]
          print('selected=' + json.dumps(selected))
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"selected={json.dumps(selected)}\n")
          PY
      - name: "Run Unit Tests with Coverage (split)"
        env:
          PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/app
          ENVIRONMENT: "testing"
          DISABLE_METRICS: "1"
          DISABLE_NOTION: "1"
          GITEE_WEBHOOK_SECRET: "secure-ci-test-webhook-secret-minimum-16-chars"
          GITHUB_WEBHOOK_SECRET: "secure-ci-test-webhook-secret-minimum-16-chars"
          DEADLETTER_REPLAY_TOKEN: "secure-ci-test-deadletter-replay-token-minimum-16-chars"
          DB_URL: "sqlite:///data/test.db"
          LOG_LEVEL: "WARNING"
          # Á°Æ‰øùÊµãËØïÂèØ‰ª•ÊâæÂà∞Ê®°Âùó
          PYTHONDONTWRITEBYTECODE: "1"
        run: |
          echo "üîç Debug: Checking environment..."
          echo "Python path: $PYTHONPATH"
          echo "Working directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "Available packages:"
          pip list | grep -E "(sqlalchemy|pytest|fastapi)" || echo "Key packages not found"

          SELECTED=$(python - <<'PY'
          import os,sys,json
          s=os.getenv('selected','') or os.getenv('SELECTED','')
          if not s:
              print('tests')
              sys.exit(0)
          try:
              arr=json.loads(s)
              print(' '.join(arr) if arr else 'tests')
          except Exception:
              print('tests')
          PY
          )
          echo "üß™ Running tests: $SELECTED"
          pytest $SELECTED -v --cov=app --cov-append --cov-report=term-missing --cov-fail-under=5 -n auto

  docker-build:
    name: "Docker Build & Test"
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Build Docker Image"
        run: |
          docker build -f Dockerfile -t ${{ env.IMAGE_LOCAL }} .

      - name: "Test Docker Image Security"
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_LOCAL }}
          format: sarif
          output: trivy-results.sarif

      - name: "Container Smoke Test"
        run: |
          docker run -d --name ci-test-app -p 8000:8000 -e APP_PORT=8000 -e ENVIRONMENT=testing -e LOG_LEVEL=INFO -e GITEE_WEBHOOK_SECRET=secure-ci-webhook-secret-minimum-16-chars -e GITHUB_WEBHOOK_SECRET=secure-ci-webhook-secret-minimum-16-chars -e DEADLETTER_REPLAY_TOKEN=secure-ci-deadletter-replay-token-minimum-16-chars -e DISABLE_NOTION=1 -e DISABLE_METRICS="" -e DB_URL=sqlite:///data/sync.db ${{ env.IMAGE_LOCAL }}
          echo "Á≠âÂæÖÂ∫îÁî®ÂêØÂä®..."
          for i in {1..30}; do
            if curl -f http://127.0.0.1:8000/health >/dev/null 2>&1; then
              echo "Â∫îÁî®ÂêØÂä®ÊàêÂäü"
              break
            fi
            echo "Á≠âÂæÖ‰∏≠... ($i/30)"
            sleep 2
          done
          curl -f http://127.0.0.1:8000/health || exit 1
          curl -f http://127.0.0.1:8000/metrics || exit 1
          docker logs --tail 20 ci-test-app
          docker rm -f ci-test-app


  dev-compose-smoke:
    name: "Dev Compose Smoke"
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
      - name: "Docker compose config validation"
        run: |
          docker compose -f infra/docker-compose.dev.yml config -q
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Start dev compose (api, db, redis, minio, prefect)"
        run: |
          set -euo pipefail
          docker compose -f infra/docker-compose.dev.yml up -d --build db redis minio prefect api

      - name: "Wait for API health"
        run: |
          set -euo pipefail
          for i in $(seq 1 60); do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "‚úÖ API healthy"; exit 0; fi
            sleep 2
          done
          echo "‚ùå API health timeout" >&2
          docker compose -f infra/docker-compose.dev.yml ps
          docker compose -f infra/docker-compose.dev.yml logs --no-color api | tail -n 200 || true
          exit 1

      - name: "Shutdown dev compose"
        if: always()
        run: |
          docker compose -f infra/docker-compose.dev.yml down -v || true

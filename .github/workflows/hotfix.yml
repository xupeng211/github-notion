name: 🔧 Emergency Hotfix Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - 'deploy'
        - 'restart'
        - 'status'

env:
  AWS_SERVER: "3.35.106.116"
  APP_DIR: "/opt/github-notion-sync"

jobs:
  hotfix:
    name: 🚨 Emergency Fix
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/aws-key.pem
        chmod 600 ~/.ssh/aws-key.pem
        ssh-keyscan -H ${{ env.AWS_SERVER }} >> ~/.ssh/known_hosts

    - name: 🚨 Execute Emergency Fix
      run: |
        cat > emergency_fix.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail

        echo "🚨 执行紧急修复..."

        APP_DIR="/opt/github-notion-sync"
        SERVICE_NAME="github-notion-sync"

        # 检查当前状态
        echo "🔍 检查当前状态..."
        sudo systemctl status $SERVICE_NAME --no-pager || echo "服务未运行"

        # 停止服务
        echo "⏹️  停止服务..."
        sudo systemctl stop $SERVICE_NAME 2>/dev/null || true
        sudo pkill -f "uvicorn" 2>/dev/null || true

        # 检查端口
        echo "🔍 检查端口占用..."
        sudo netstat -tlnp | grep :8000 || echo "端口 8000 空闲"

        # 创建应用目录
        sudo mkdir -p $APP_DIR
        sudo chown ubuntu:ubuntu $APP_DIR
        cd $APP_DIR

        # 检查 Python 环境
        echo "🐍 检查 Python 环境..."
        python3 --version
        which python3

        # 检查 pip
        python3 -m pip --version || {
            echo "📦 安装 pip..."
            curl https://bootstrap.pypa.io/get-pip.py | python3 --user
        }

        # 安装核心依赖
        echo "📦 安装核心依赖..."
        python3 -m pip install --user --upgrade pip
        python3 -m pip install --user fastapi==0.111.0 uvicorn==0.30.1

        # 创建最小测试应用
        echo "🔧 创建测试应用..."
        cat > test_app.py << 'PYEOF'
from fastapi import FastAPI
from datetime import datetime

app = FastAPI(title="GitHub-Notion Sync Emergency")

@app.get("/health")
def health():
    return {
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "environment": "production",
        "message": "Emergency service running"
    }

@app.get("/")
def root():
    return {"message": "GitHub-Notion Sync - Emergency Mode", "status": "ok"}
PYEOF

        # 创建简化的 systemd 服务
        echo "🔧 创建测试服务..."
        sudo tee /etc/systemd/system/emergency-service.service > /dev/null << 'SERVICEEOF'
[Unit]
Description=Emergency GitHub-Notion Service
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory=/opt/github-notion-sync
Environment=PATH=/home/ubuntu/.local/bin:/usr/local/bin:/usr/bin:/bin
ExecStart=/home/ubuntu/.local/bin/uvicorn test_app:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
SERVICEEOF

        # 启动紧急服务
        echo "🚀 启动紧急服务..."
        sudo systemctl daemon-reload
        sudo systemctl enable emergency-service
        sudo systemctl start emergency-service

        # 等待启动
        sleep 15

        # 检查状态
        echo "🔍 检查服务状态..."
        sudo systemctl status emergency-service --no-pager

        # 检查进程
        echo "🔍 检查进程..."
        ps aux | grep uvicorn | grep -v grep || echo "进程未找到"

        # 检查端口
        echo "🔍 检查端口..."
        sudo netstat -tlnp | grep :8000 || echo "端口未监听"

        # 测试连接
        echo "🧪 测试连接..."
        for i in {1..5}; do
            if curl -f http://localhost:8000/health; then
                echo "✅ 连接成功"
                break
            else
                echo "❌ 连接失败，重试 $i/5"
                sleep 5
            fi
        done

        echo "✅ 紧急修复完成"
        EOF

        # 执行修复
        scp -i ~/.ssh/aws-key.pem -o StrictHostKeyChecking=no emergency_fix.sh ubuntu@${{ env.AWS_SERVER }}:/tmp/
        ssh -i ~/.ssh/aws-key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_SERVER }} "chmod +x /tmp/emergency_fix.sh && /tmp/emergency_fix.sh"

    - name: 🧪 Verify Fix
      run: |
        echo "🔍 验证修复结果..."
        sleep 15

        if curl -f http://${{ env.AWS_SERVER }}:8000/health; then
          echo "✅ 紧急修复成功！"
        else
          echo "❌ 修复失败，需要进一步诊断"

          # 获取更多诊断信息
          ssh -i ~/.ssh/aws-key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.AWS_SERVER }} "
            echo '=== 系统状态 ==='
            sudo systemctl status emergency-service --no-pager || true
            echo '=== 端口状态 ==='
            sudo netstat -tlnp | grep :8000 || echo '端口 8000 未监听'
            echo '=== 进程状态 ==='
            ps aux | grep uvicorn || echo '没有 uvicorn 进程'
            echo '=== 最新日志 ==='
            sudo journalctl -u emergency-service --no-pager -n 30 || true
            echo '=== Python 环境 ==='
            python3 --version
            /home/ubuntu/.local/bin/uvicorn --version || echo 'uvicorn 未安装'
          "
        fi

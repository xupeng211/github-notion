name: Build and Verify

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 1

      - uses: docker/setup-buildx-action@v3

      - name: Pre-build Fail-Fast
        run: |
          echo "🔍 Docker构建上下文大小分析"
          echo "=================================================="
          
          # 计算原始目录大小
          ORIGINAL_SIZE_MB=$(du -sm . | cut -f1)
          echo "📊 目录大小分析:"
          echo "原始目录大小: ${ORIGINAL_SIZE_MB}MB"
          
          # 模拟构建上下文（简化版）
          echo "🐳 模拟Docker构建上下文..."
          CONTEXT_SIZE=$(tar -czf - --exclude-from=.dockerignore . 2>/dev/null | wc -c)
          CONTEXT_SIZE_KB=$((CONTEXT_SIZE / 1024))
          echo "构建上下文大小(压缩后): ${CONTEXT_SIZE_KB}KB"
          
          # 检查大小阈值
          echo "🚦 大小检查:"
          THRESHOLD_MB=500
          THRESHOLD_BYTES=$((THRESHOLD_MB * 1024 * 1024))
          
          if [[ $CONTEXT_SIZE -le $THRESHOLD_BYTES ]]; then
            echo "✅ 构建上下文大小合理: ${CONTEXT_SIZE_KB}KB ≤ ${THRESHOLD_MB}MB"
          else
            echo "❌ 构建上下文过大: ${CONTEXT_SIZE_KB}KB > ${THRESHOLD_MB}MB"
            exit 1
          fi
          
          echo "Bytes=${CONTEXT_SIZE}" > size_bytes.txt
          python3 scripts/pretty_size.py ${CONTEXT_SIZE}
          df -h

      - name: Build (no push; load)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/api.Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: ghcr.io/${{ github.repository }}/app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Smoke
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ github.repository }}/app:${{ github.sha }}"
          echo "✅ Docker镜像构建成功"
          echo "镜像标签: $IMG"
          echo "平台: linux/amd64"
          echo "Dockerfile: infra/docker/api.Dockerfile"
          
          docker run -d --rm --name app-smoke -p 8000:8000 "$IMG"
          sleep 5
          
          echo "HEALTH=$(curl -fsS http://127.0.0.1:8000/health)"
          curl -fsSL http://127.0.0.1:8000/metrics | head -n 5 || echo "SKIP metrics"
          
          docker logs --tail=100 app-smoke || true
          docker rm -f app-smoke || true
          
          mkdir -p build-metrics
          printf '{"sha":"%s","ts":"%s","dockerfile_path":"infra/docker/api.Dockerfile"}\n' "${{ github.sha }}" "$(date -u +%FT%TZ)" > build-metrics/metrics.json

      - name: SBOM
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ github.repository }}/app:${{ github.sha }}"
          echo "📦 生成SBOM (Software Bill of Materials)..."

          # 安装syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # 生成SBOM
          if syft packages "$IMG" -o spdx-json > sbom.spdx.json 2>/dev/null; then
            echo "✅ syft SBOM生成成功"
          else
            echo "⚠️ syft失败，尝试docker sbom..."
            if docker sbom "$IMG" -o spdx-json > sbom.spdx.json 2>/dev/null; then
              echo "✅ docker sbom生成成功"
            else
              echo "❌ SBOM生成失败"
              exit 1
            fi
          fi

          # 验证SBOM
          SBOM_SIZE=$(wc -c < sbom.spdx.json)
          echo "SBOM bytes: ${SBOM_SIZE}"
          echo "SBOM文件大小: ${SBOM_SIZE} 字节"

          # 检查包数量
          if command -v jq >/dev/null 2>&1; then
            PACKAGE_COUNT=$(jq '.packages | length' sbom.spdx.json 2>/dev/null || echo "0")
            echo "包数量: ${PACKAGE_COUNT}"
          else
            echo "jq不可用，跳过包数量检查"
          fi

          # 显示SBOM头部内容
          echo "SBOM头部内容:"
          head -n 20 sbom.spdx.json

          # 验证SBOM大小
          if [[ $SBOM_SIZE -lt 1000 ]]; then
            echo "❌ SBOM文件过小，可能生成失败"
            exit 1
          else
            echo "✅ SBOM文件大小验证通过"
          fi

      - name: Trivy Scan
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ github.repository }}/app:${{ github.sha }}"
          echo "🔒 执行安全扫描..."
          
          echo "📋 加载安全策略和白名单..."
          if [[ -f "security/trivy-policy.yaml" ]]; then
            echo "✅ 使用策略文件: security/trivy-policy.yaml"
            POLICY_ARG="--config /work/security/trivy-policy.yaml"
          else
            echo "⚠️ 策略文件不存在: security/trivy-policy.yaml"
            POLICY_ARG=""
          fi
          
          if [[ -f "security/allowlist.yaml" ]]; then
            echo "✅ 使用白名单文件: security/allowlist.yaml"
            ALLOWLIST_ARG="--ignorefile /work/security/allowlist.yaml"
          else
            echo "⚠️ 白名单文件不存在: security/allowlist.yaml"
            ALLOWLIST_ARG=""
          fi
          
          docker run --rm -v $PWD:/work -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image \
            --format json --severity CRITICAL,HIGH \
            --scanners vuln \
            $POLICY_ARG \
            $ALLOWLIST_ARG \
            "$IMG" | tee trivy-report.json

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build-metrics/metrics.json
            sbom.spdx.json
            trivy-report.json

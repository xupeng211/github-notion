name: 🚀 Optimized Build and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - 'production'
        - 'staging'
        - 'testing'
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'requirements.txt'
      - 'Dockerfile*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 预检查阶段
  pre-check:
    name: 🔍 Pre-build Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check for hardcoded values
        run: |
          echo "🔍 检查硬编码值..."
          if grep -r --include="*.py" --include="*.yml" -n "3\.35\.106\.116\|localhost:8000" . | grep -v ".git"; then
            echo "⚠️ 发现硬编码值，建议使用环境变量"
          else
            echo "✅ 未发现明显的硬编码问题"
          fi
      
      - name: Validate YAML files
        run: |
          echo "🔍 验证 YAML 语法..."
          python3 -c "
          import yaml
          import os
          for root, dirs, files in os.walk('.github/workflows'):
              for file in files:
                  if file.endswith(('.yml', '.yaml')):
                      with open(os.path.join(root, file)) as f:
                          yaml.safe_load(f)
          print('✅ YAML 语法验证通过')
          "

  # 构建阶段
  build:
    name: 🐳 Build and Push
    runs-on: ubuntu-latest
    needs: pre-check
    timeout-minutes: 20
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            APP_PORT=8000

  # 部署阶段
  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
      - name: Deploy to AWS EC2
        env:
          AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          AWS_SERVER: ${{ secrets.AWS_HOST || '3.35.106.116' }}
          AWS_USER: ${{ secrets.AWS_USER || 'ubuntu' }}
        run: |
          # 设置 SSH
          mkdir -p ~/.ssh
          echo "$AWS_PRIVATE_KEY" > ~/.ssh/aws_key
          chmod 600 ~/.ssh/aws_key
          
          # 部署
          ssh -i ~/.ssh/aws_key -o StrictHostKeyChecking=no $AWS_USER@$AWS_SERVER << 'EOF'
            cd /opt/github-notion-sync || exit 1
            
            echo "🔄 停止现有服务..."
            docker-compose down || true
            
            echo "📥 拉取最新镜像..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ needs.build.outputs.image-tag }}
            
            echo "🚀 启动新服务..."
            docker-compose up -d
            
            echo "⏳ 等待服务启动..."
            sleep 30
            
            echo "🧪 健康检查..."
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ 部署成功"
            else
              echo "❌ 健康检查失败"
              exit 1
            fi
          EOF

      - name: Verify deployment
        run: |
          sleep 10
          if curl -f http://${{ secrets.AWS_HOST || '3.35.106.116' }}:8000/health > /dev/null 2>&1; then
            echo "✅ 外部访问验证成功"
          else
            echo "❌ 外部访问验证失败"
            exit 1
          fi

version: '1.0'
name: master-pipeline
displayName: MasterPipeline
stages:
  - stage:
    name: build_and_push
    displayName: 构建与推送镜像
    steps:
      - step: build@python
        name: docker_build_and_push
        displayName: Docker 构建与推送 + 冒烟
        pythonVersion: '3.11'
        commands:
          - python3 -V
          - echo "Login to registry ${REGISTRY} as ${REGISTRY_USERNAME}"
          - echo "${REGISTRY_PASSWORD}" | docker login "${REGISTRY}" -u "${REGISTRY_USERNAME}" --password-stdin
          - |
            VERSION=$(git rev-parse --short HEAD)
            IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"
            echo "Building image ${IMAGE_FULL}:${VERSION} and :latest"
            docker build -f Dockerfile -t "${IMAGE_FULL}:${VERSION}" -t "${IMAGE_FULL}:latest" .
          - |
            echo "Run container for smoke test"
            docker run -d --name ci-app -p 8000:8000 \
              -e APP_PORT=8000 \
              -e LOG_LEVEL=INFO \
              -e GITEE_WEBHOOK_SECRET=ci-secret \
              -e DB_URL=sqlite:///data/sync.db \
              "${REGISTRY}/${IMAGE_NAME}:latest"
            sleep 2
            curl -fsS http://127.0.0.1:8000/health
            code=$(curl -sS -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/metrics/)
            if [ "$code" != "200" ]; then echo "metrics failed $code" && docker logs ci-app && exit 1; fi
            BODY='{"issue":{"id":9001,"number":9001,"title":"gitee-ci"}}'
            SIG=$(python3 - <<'PY'
import hmac,hashlib
sec=b"ci-secret"; body=b'{"issue":{"id":9001,"number":9001,"title":"gitee-ci"}}'
print(hmac.new(sec, body, hashlib.sha256).hexdigest())
PY
            )
            curl -fsS -H "X-Gitee-Token: $SIG" -H "X-Gitee-Event: Issue Hook" -H "Content-Type: application/json" -d "$BODY" http://127.0.0.1:8000/gitee_webhook >/dev/null
            docker logs --tail 50 ci-app
            docker rm -f ci-app
          - |
            echo "Pushing image"
            VERSION=$(git rev-parse --short HEAD)
            IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"
            docker push "${IMAGE_FULL}:${VERSION}"
            docker push "${IMAGE_FULL}:latest"
triggers:
  push:
    branches:
      include:
        - main
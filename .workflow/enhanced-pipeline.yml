version: '1.0'
name: enhanced-pipeline
displayName: 增强版 CI/CD 流水线
stages:
  # 阶段 1: 代码质量检查和测试
  - stage:
    name: quality_and_test
    displayName: 代码质量检查与测试
    steps:
      - step: build@python
        name: code_quality_test
        displayName: 代码质量检查和单元测试
        pythonVersion: '3.11'
        commands:
          # 环境准备
          - echo "🔧 环境准备..."
          - python3 -V
          - python3 -m pip install --upgrade pip
          - pip install -r requirements.txt
          
          # 代码质量检查
          - echo "📝 代码质量检查..."
          - python3 -m flake8 app/ --max-line-length=120 --ignore=E203,W503 || echo "代码风格检查完成"
          - python3 -m mypy app/ --ignore-missing-imports || echo "类型检查完成"
          
          # 安全扫描
          - echo "🔍 安全扫描..."
          - pip install bandit
          - bandit -r app/ -f json -o bandit-report.json || echo "安全扫描完成"
          
          # 单元测试
          - echo "🧪 运行单元测试..."
          - python3 -m pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=term
          
          # 数据库迁移测试
          - echo "🗄️ 测试数据库迁移..."
          - mkdir -p test_data
          - DB_URL=sqlite:///test_data/test.db alembic upgrade head
          - DB_URL=sqlite:///test_data/test.db alembic current
          
          # 生成测试报告
          - echo "📊 生成测试报告..."
          - ls -la coverage.xml || echo "无覆盖率报告"
          - ls -la bandit-report.json || echo "无安全报告"

  # 阶段 2: 构建和推送镜像
  - stage:
    name: build_and_push
    displayName: 构建与推送镜像
    dependsOn: quality_and_test
    steps:
      - step: build@python
        name: docker_build_push
        displayName: Docker 构建、测试与推送
        pythonVersion: '3.11'
        commands:
          # 设置变量
          - |
            VERSION=$(git rev-parse --short HEAD)
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"
            echo "构建版本: ${VERSION}, 时间戳: ${TIMESTAMP}"
            
          # Docker 登录
          - echo "🔑 登录镜像仓库..."
          - echo "${REGISTRY_PASSWORD}" | docker login "${REGISTRY}" -u "${REGISTRY_USERNAME}" --password-stdin
          
          # 多阶段构建优化
          - echo "🏗️ 构建 Docker 镜像..."
          - |
            docker build \
              --build-arg VERSION=${VERSION} \
              --build-arg BUILD_TIME=${TIMESTAMP} \
              --cache-from "${IMAGE_FULL}:latest" \
              -f Dockerfile \
              -t "${IMAGE_FULL}:${VERSION}" \
              -t "${IMAGE_FULL}:latest" \
              -t "${IMAGE_FULL}:${TIMESTAMP}" \
              .
            
          # 容器安全扫描
          - echo "🛡️ 容器安全扫描..."
          - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL "${IMAGE_FULL}:${VERSION}" || echo "安全扫描完成"
          
          # 冒烟测试
          - echo "💨 运行冒烟测试..."
          - |
            # 启动测试容器
            docker run -d --name ci-app -p 8000:8000 \
              -e APP_PORT=8000 \
              -e LOG_LEVEL=INFO \
              -e GITEE_WEBHOOK_SECRET=ci-secret \
              -e DB_URL=sqlite:///data/sync.db \
              -e ENVIRONMENT=ci \
              "${IMAGE_FULL}:${VERSION}"
            
            # 等待服务启动
            echo "等待服务启动..."
            for i in {1..30}; do
              if curl -f http://127.0.0.1:8000/health >/dev/null 2>&1; then
                echo "服务启动成功"
                break
              fi
              sleep 1
            done
            
            # 健康检查测试
            echo "🏥 健康检查测试..."
            health_response=$(curl -s http://127.0.0.1:8000/health)
            echo "健康检查响应: $health_response"
            
            # 指标端点测试
            echo "📊 指标端点测试..."
            metrics_code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/metrics)
            if [ "$metrics_code" != "200" ]; then 
              echo "指标端点测试失败: $metrics_code"
              docker logs ci-app
              exit 1
            fi
            
            # API 文档测试
            echo "📚 API 文档测试..."
            docs_code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/docs)
            if [ "$docs_code" != "200" ]; then 
              echo "API 文档测试失败: $docs_code"
              docker logs ci-app
              exit 1
            fi
            
            # Webhook 功能测试
            echo "🔗 Webhook 功能测试..."
            BODY='{"issue":{"id":9001,"number":9001,"title":"ci-test"}}'
            SIG=$(python3 - <<'PY'
import hmac,hashlib
sec=b"ci-secret"; body=b'{"issue":{"id":9001,"number":9001,"title":"ci-test"}}'
print(hmac.new(sec, body, hashlib.sha256).hexdigest())
PY
            )
            webhook_code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "X-Gitee-Token: $SIG" \
              -H "X-Gitee-Event: Issue Hook" \
              -H "Content-Type: application/json" \
              -d "$BODY" \
              http://127.0.0.1:8000/gitee_webhook)
            
            echo "Webhook 测试响应码: $webhook_code"
            
            # 输出日志并清理
            echo "📋 容器日志:"
            docker logs --tail 50 ci-app
            docker rm -f ci-app

          # Alembic 迁移验证
          - echo "🔄 验证数据库迁移..."
          - |
            docker run --rm --name ci-alembic \
              -e DB_URL=sqlite:///data/sync.db \
              -v $(pwd):/app \
              -w /app \
              "${IMAGE_FULL}:${VERSION}" \
              sh -c "alembic current && echo 'Alembic 状态验证成功'"

          # 推送镜像
          - echo "📤 推送镜像到仓库..."
          - |
            VERSION=$(git rev-parse --short HEAD)
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            IMAGE_FULL="${REGISTRY}/${IMAGE_NAME}"
            
            docker push "${IMAGE_FULL}:${VERSION}"
            docker push "${IMAGE_FULL}:latest" 
            docker push "${IMAGE_FULL}:${TIMESTAMP}"
            
            echo "✅ 镜像推送完成:"
            echo "  - ${IMAGE_FULL}:${VERSION}"
            echo "  - ${IMAGE_FULL}:latest"
            echo "  - ${IMAGE_FULL}:${TIMESTAMP}"

  # 阶段 3: 部署到预发布环境
  - stage:
    name: deploy_staging
    displayName: 部署到预发布环境
    dependsOn: build_and_push
    condition: eq('${{ parameters.deploy_staging }}', 'true')
    steps:
      - step: build@python
        name: staging_deploy
        displayName: 预发布环境部署
        pythonVersion: '3.11'
        commands:
          - echo "🚀 部署到预发布环境..."
          - |
            VERSION=$(git rev-parse --short HEAD)
            echo "部署版本: ${VERSION}"
            
            # 这里可以添加具体的部署脚本
            # 例如: kubectl, docker-compose, ansible 等
            echo "TODO: 添加具体的预发布部署逻辑"

  # 阶段 4: 生产环境部署
  - stage:
    name: deploy_production
    displayName: 生产环境部署
    dependsOn: deploy_staging
    condition: and(eq('${{ parameters.deploy_production }}', 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
      - step: build@python
        name: production_deploy
        displayName: 生产环境部署
        pythonVersion: '3.11'
        commands:
          - echo "🌟 部署到生产环境..."
          - |
            VERSION=$(git rev-parse --short HEAD)
            echo "生产部署版本: ${VERSION}"
            
            # 生产部署前的最终检查
            echo "🔍 生产部署前检查..."
            
            # 这里添加生产部署脚本
            echo "TODO: 添加具体的生产部署逻辑"
            
            echo "✅ 生产部署完成"

# 流水线参数
parameters:
  - name: deploy_staging
    displayName: 部署到预发布环境
    type: boolean
    default: false
    
  - name: deploy_production
    displayName: 部署到生产环境
    type: boolean
    default: false

# 触发条件
triggers:
  push:
    branches:
      include:
        - main
        - develop
  pull_request:
    branches:
      include:
        - main 
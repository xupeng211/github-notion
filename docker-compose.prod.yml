version: '3.8'

services:
  # 主应用服务 - 生产配置
  app:
    image: ghcr.io/xupeng211/github-notion:latest
    container_name: github-notion-sync-prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=production
      - DB_URL=${DB_URL:-sqlite:///./data/app.db}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-100}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-2097152}
      - DISABLE_NOTION=${DISABLE_NOTION:-false}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - NOTION_TOKEN=${NOTION_TOKEN}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
      - DEADLETTER_REPLAY_TOKEN=${DEADLETTER_REPLAY_TOKEN}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: github-notion-sync-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: github-notion-sync-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app_network

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: github-notion-sync-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - app_network

  # 日志聚合 - Loki
  loki:
    image: grafana/loki:latest
    container_name: github-notion-sync-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app_network

  # 日志收集 - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: github-notion-sync-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - app_network

  # 备份服务（增强版）
  backup:
    image: alpine:3.20
    container_name: github-notion-sync-backup
    restart: unless-stopped
    volumes:
      - ./data:/app/data:ro
      - ./backups:/app/backups
      - ./scripts:/app/scripts:ro
    working_dir: /app
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "apk add --no-cache aws-cli &&
       crond -f -l 8 -L /dev/stdout &
       echo '0 3 * * * /bin/sh /app/scripts/backup_enhanced.sh >> /proc/1/fd/1 2>&1' | crontab - &&
       echo '0 4 * * 0 /bin/sh /app/scripts/cleanup_old_backups.sh >> /proc/1/fd/1 2>&1' | crontab - &&
       tail -f /dev/null"
    networks:
      - app_network

  # 健康检查服务
  healthcheck:
    image: curlimages/curl:latest
    container_name: github-notion-sync-healthcheck
    restart: unless-stopped
    depends_on:
      - app
    networks:
      - app_network
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "while true; do
         if curl -f http://app:8000/health > /dev/null 2>&1; then
           echo '$(date): Health check passed'
         else
           echo '$(date): Health check failed'
         fi
         sleep 60
       done"

volumes:
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16  # Docker internal network

name: CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

stages:
  - test
  - build
  - deploy

# 需要在 Gitee 仓库的密钥中配置：
# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, AWS_ACCOUNT_ID, ECR_REPOSITORY
# 例如：ECR_REPOSITORY=gitee-notion-sync

jobs:
  test:
    stage: test
    image: python:3.11-slim
    script:
      - pip install -r requirements.txt
      - flake8
      - pytest -q

  build:
    stage: build
    image: alpine:3
    services:
      - docker:dind
    variables:
      REGISTRY_HOST: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}
    script:
      - apk add --no-cache py3-pip python3
      - pip install awscli
      - aws --version
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - docker build -t ${REGISTRY_HOST}:${CI_COMMIT_SHA} -t ${REGISTRY_HOST}:latest .
      - docker push ${REGISTRY_HOST}:${CI_COMMIT_SHA}
      - docker push ${REGISTRY_HOST}:latest

  deploy:
    stage: deploy
    image: alpine:3
    variables:
      REGISTRY_HOST: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}
    script:
      - apk add --no-cache openssh-client
      - mkdir -p ~/.ssh && chmod 700 ~/.ssh
      - echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
      - ssh -o StrictHostKeyChecking=no ${EC2_SSH_USER}@${EC2_HOST} "mkdir -p /opt/gitee-notion-sync"
      - scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${EC2_SSH_USER}@${EC2_HOST}:/opt/gitee-notion-sync/
      - scp -o StrictHostKeyChecking=no -r infra ${EC2_SSH_USER}@${EC2_HOST}:/opt/gitee-notion-sync/
      - ssh -o StrictHostKeyChecking=no ${EC2_SSH_USER}@${EC2_HOST} "cd /opt/gitee-notion-sync && chmod +x infra/*.sh && REGISTRY_HOST=${REGISTRY_HOST} IMAGE_REF=${REGISTRY_HOST}:${CI_COMMIT_SHA} AWS_REGION=${AWS_REGION} ./infra/deploy.sh"

